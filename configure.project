#!/bin/sh

# Project name and version
PACKAGE="unshield"
VERSION="1.5w"
PACKAGE_URL=''

# Flags that will be used in all makefiles that compile code...
PROJECT_CFLAGS='-Wall -g -O2' # -Wextra -Wno-unused-parameter -Wno-missing-field-initializers
PROJECT_CXXFLAGS="${PROJECT_CFLAGS}"
PROJECT_CPPFLAGS=''
PROJECT_LDFLAGS=''
PROJECT_LXXFLAGS=''
PROJECT_LIBS=''

# Project type, use C to avoid checking for C++ compiler and stuff
# supported values: C, C++ ("" = C++)
PROJECT_TYPE=C

# Makefile
MK_SUBDIRS='lib src'
MK_DISTCLEAN_FILES=''
MK_CHECK=''


# configure the project using the commands provided
# by `configure` and other scripts and commands/tools
w_main_func()
{
	# GCC=yes if gcc has been detected

	# if the Makefiles are only compatible with GNU make, use w_require_gnu_make
	#w_prefer_gnu_make

	# check required headers and exit on error
	w_check_headers_required stdio.h

	# detect the presence of headers
	# config.h: define HAVE_ZCONF_H if zconf.h is present, etc
	w_check_headers inttypes.h unistd.h dlfcn.h fnmatch.h
    
	CFLAGS="-DAUTOTOOLS $CFLAGS"
}


# function to run after performing all checks
w_aftercheck_func()
{
	printf ""
}


# function to run once everything is done, probably add stuff to config.h and config.mk
w_finish_func()
{
	if [ "$OS_TARGET" = "MinGW" ] ; then
		echo "LCOMDLG32 = -lcomdlg32" >> config.mk
		echo "LSHLWAPI = -lshlwapi" >> config.mk
		echo "#define __GNU_SOURCE 1" >> config.h
	fi
}

#=====================================================================
# CMAKE compat
#AC_SUBST(CMAKE_INSTALL_PREFIX, [${prefix}])
#AC_SUBST(CMAKE_INSTALL_FULL_BINDIR, [${prefix}])
#AC_SUBST(CMAKE_INSTALL_FULL_LIBDIR, [${libdir}])
#AC_SUBST(CMAKE_INSTALL_FULL_INCLUDEDIR, [${includedir}])
#AC_SUBST(PROJECT_VERSION, [${VERSION}])
