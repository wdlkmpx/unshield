#!/bin/sh

# Project name and version
PACKAGE="unshield"
VERSION="1.5w"
PACKAGE_URL=''

# Flags that will be used in all makefiles that compile code...
PROJECT_CFLAGS='-Wall -g -O2' # -Wextra -Wno-unused-parameter -Wno-missing-field-initializers
PROJECT_CXXFLAGS="${PROJECT_CFLAGS}"
PROJECT_CPPFLAGS=''
PROJECT_LDFLAGS=''
PROJECT_LXXFLAGS=''
PROJECT_LIBS=''

# Project type, use C to avoid checking for C++ compiler and stuff
# supported values: C, C++ ("" = C++)
PROJECT_TYPE=C

# Files.in, to replace @VERSION@ and a few other variables
#  see w_conf/00_standard_infile.sh for a complete list
#w_infiles='lib/libmp3.pc'

# config.h: custom extra lines
w_config_h_extra_lines=""

# config.mk: custom extra lines
w_config_mk_extra_lines=""

#w_new_option <OPT>
#  Manually create the following funcs:
#   opt_print_<OPT>()     { }
#   opt_configure_<OPT>() { }
#   opt_check_<OPT>()     { }


# configure the project using the commands provided
# by `configure` and other scripts and commands/tools
w_main_func()
{
	# GCC=yes if gcc has been detected

	# if the Makefiles are only compatible with GNU make, use w_require_gnu_make
	#w_prefer_gnu_make

	# check required headers and exit on error
	w_check_headers_required stdio.h

	# detect the presence of headers
	# config.h: define HAVE_ZCONF_H if zconf.h is present, etc
	w_check_headers inttypes.h stdint.h unistd.h dlfcn.h fnmatch.h shlwapi.h
    
	CFLAGS="-DAUTOTOOLS $CFLAGS"
}

# once everything is done, you can fix things, etc
w_finish_func()
{
	if [ "$OS_TARGET" = "MinGW" ] ; then
		echo "LCOMDLG32 = -lcomdlg32" >> config.mk
		echo "LSHLWAPI = -lshlwapi" >> config.mk
		echo "#define __USE_MINGW_ANSI_STDIO 1" >> config.h
	fi
}

#=====================================================================

# CMAKE compat
#AC_SUBST(CMAKE_INSTALL_PREFIX, [${prefix}])
#AC_SUBST(CMAKE_INSTALL_FULL_BINDIR, [${prefix}])
#AC_SUBST(CMAKE_INSTALL_FULL_LIBDIR, [${libdir}])
#AC_SUBST(CMAKE_INSTALL_FULL_INCLUDEDIR, [${includedir}])
#AC_SUBST(PROJECT_VERSION, [${VERSION}])
